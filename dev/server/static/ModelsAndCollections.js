// Generated by CoffeeScript 1.3.3
(function() {
  var Game, Games, Match, Matches, User, Users, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.app = (_ref = window.app) != null ? _ref : {};

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    return Game;

  })(Backbone.Model);

  Games = (function(_super) {

    __extends(Games, _super);

    function Games() {
      return Games.__super__.constructor.apply(this, arguments);
    }

    Games.prototype.model = Game;

    return Games;

  })(Backbone.Collection);

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    return User;

  })(Backbone.Model);

  Users = (function(_super) {

    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.model = User;

    Users.prototype.url = "http://challenger-dev1.appspot.com/users";

    return Users;

  })(Backbone.Collection);

  Match = (function(_super) {

    __extends(Match, _super);

    function Match() {
      return Match.__super__.constructor.apply(this, arguments);
    }

    return Match;

  })(Backbone.Model);

  Matches = (function(_super) {

    __extends(Matches, _super);

    function Matches() {
      return Matches.__super__.constructor.apply(this, arguments);
    }

    Matches.prototype.model = Match;

    return Matches;

  })(Backbone.Collection);

  this.app.Game = Game;

  this.app.Games = Games;

  this.app.User = User;

  this.app.Users = Users;

  this.app.Match = Match;

  this.app.Matches = Matches;

}).call(this);
